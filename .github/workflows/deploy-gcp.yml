name: Deploy to Google Cloud Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: donal-geraghty-home
  REGION: europe-west1
  SERVICE_NAME: donal-geraghty-home
  REPOSITORY: donal-geraghty-home

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test -- --run
      
    - name: Build
      run: npm run build
      
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM nginx:alpine
        COPY dist /usr/share/nginx/html
        COPY nginx.conf /etc/nginx/nginx.conf
        EXPOSE 8080
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
        cat > nginx.conf << 'EOF'
        events {
          worker_connections 1024;
        }
        http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          
          server {
            listen 8080;
            server_name localhost;
            root /usr/share/nginx/html;
            index index.html;
            
            location / {
              try_files $uri $uri/ /index.html;
            }
            
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
              expires 1y;
              add_header Cache-Control "public, immutable";
            }
          }
        }
        EOF
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set Project
      run: gcloud config set project ${{ env.PROJECT_ID }}
        
    - name: Verify Authentication
      run: |
        gcloud auth list
        gcloud config list
        
    - name: Enable Artifact Registry API
      run: gcloud services enable artifactregistry.googleapis.com
        
    - name: Create Artifact Registry Repository
      run: |
        gcloud artifacts repositories create ${{ env.REPOSITORY }} \
          --repository-format=docker \
          --location=${{ env.REGION }} \
          --description="Docker repository for Donal Geraghty Home" \
          || echo "Repository already exists"
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10
          
    - name: Get service URL
      run: |
        echo "Service URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')"
